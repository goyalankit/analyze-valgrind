#!/work/02681/ankitg/programs/bin/ruby

require 'csv'
require 'pry'

# create a method in string class to covert hex to integer
class String
    def to_d
        self.to_i(16) #convert hex(16) to decimal(10)
    end
end

class VarInfo
    attr_accessor :name, :base_address, :size

    def initialize name, base_address, size
        @name = name
        @base_address = base_address
        @size = size
    end
end

variables = []

File.readlines(ARGV[0]).each do |line|
    line = line.strip
    next if line.nil? || line == ""
    next if line.include?("==")
    next if line.include?("user") || line.include?("input")
    if line.include?("varinfo")
        s = line.split(":")
        variables << VarInfo.new(s[1], s[3], s[2])
        puts line
    end    
end


#variables[0].size.to_i.times do |vr|
#    p "#{vr} #{ variables[0].base_address.to_d + vr*4}"
#end

def print_like_macpo type, name, index, size
    case type
    when "S"
        mytype = "W"
    when "L"
        mytype = "R"
    when "M"
        mytype = "RW"
    else
        mytype = type
    end
    puts "#{mytype} : #{name}+#{index} : #{size}"
end

def print_for_macpo_generation type, name, index, size
    case type
    when "S"
        mytype = "W"
    when "L"
        mytype = "R"
    when "M"
        mytype = "RW"
    else
        mytype = type
    end
    puts "#{mytype} : #{name}+#{index} : #{size}"
end



File.readlines(ARGV[1]).each do |line|
    line = line.strip
    next if line.include?("==")
    next if line.include?("user") || line.include?("input")
    next if line.include?("varinfo") || line.include?("START") || line.include?("THREAD")
    next if line.nil? || line.nil? || line  == ""

    variables.each do |v|
        if (false) 
            ts = line.split(" ")
            instruction = ts[0]
            s = ts[1]
            address, size = s.split(",")
            if(address.to_d == v.base_address.to_d)
                #p "#{v.name} - #{v.size}"
            end
        else
            ts = line.split(" ")
            instruction = ts[0]
            address = ts[1]
            size = ts[2]
        end


        if((address.to_d >= v.base_address.to_d) && (address.to_d <= (v.base_address.to_d + 4 * (v.size.to_i - 1))))
            index_accessed = (address.to_d - v.base_address.to_d) / 4
            num_indexes = size.to_d / 4
            num_indexes.times do |n|
                print_like_macpo ts[0], v.name, index_accessed, size if !ARGV[2].nil? && ARGV[2] == "mlo"
                print_for_macpo_generation ts[0], v.name, address, size if !ARGV[2].nil? && ARGV[2] == "macpo"
                p "#{ts[0]},#{v.name},#{index_accessed},#{size}" if ARGV[2].nil?
            end
        end
    end
end
